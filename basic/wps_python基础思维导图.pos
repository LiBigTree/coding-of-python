{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[{"parent":"root","children":[{"parent":"3836c4bbf543","children":[{"parent":"2d5b81d10ffe","children":[],"id":"89b4d2081f0a","title":"异常处理是为了防止程序因为某种异常的问题提前终止而采取的手段"}],"id":"2d5b81d10ffe","title":"定义"},{"parent":"3836c4bbf543","children":[{"parent":"5e8e34c1f7c6","children":[{"parent":"a5a740c6e234","children":[],"id":"20ab87b3ebd2","title":"try:<br>&nbsp; &nbsp; [正常时运行的内容]<br>expect Expection（异常类型） (as e):<br>&nbsp; &nbsp; &nbsp;[异常时运行的内容(出现异常时的处理方式)]<br>else:<br>&nbsp; &nbsp; &nbsp;[正常运行做出的反映]"},{"parent":"a5a740c6e234","children":[{"parent":"43b327078bb6","children":[],"id":"0bc5d01fa8d9","title":"无论程序是否运行，都会执行该语句下的代码块"}],"id":"43b327078bb6","title":"finally子句"}],"id":"a5a740c6e234","title":"结构"},{"parent":"5e8e34c1f7c6","children":[{"parent":"e4aa9a403519","children":[],"id":"27ce205d0ed2","title":"函数中出现异常 处理 or &gt;<br>传播到函数调用处 处理 or &gt;<br>传播到全局作用域 处理 or &gt;<br>程序终止并显示异常"}],"id":"e4aa9a403519","title":"异常的传播"}],"id":"5e8e34c1f7c6","title":"性质"},{"parent":"3836c4bbf543","children":[{"parent":"d441dda086bf","children":[{"parent":"258be01f0b11","children":[],"id":"fa040fce632f","title":"AttributeError 引用属性、赋值失败时引发"},{"parent":"258be01f0b11","children":[],"id":"6116fcddbc9f","title":"OSError 操作系统不能执行指定任务引发 有多个子类"},{"parent":"258be01f0b11","children":[],"id":"069febbf486d","title":"NameError 找不到变量名称引发"},{"parent":"258be01f0b11","children":[],"id":"522b5dfce53b","title":"TypeError 内置函数或函数应用不正确时引发"},{"parent":"258be01f0b11","children":[],"id":"ee35ccab55e5","title":"ValueError 内置操作或函数类型正确但包含的值不合适"},{"parent":"258be01f0b11","children":[],"id":"a1260b55f156","title":"......"}],"id":"258be01f0b11","title":"常见的异常类"},{"parent":"d441dda086bf","children":[],"id":"b572b864a86d","title":"可以自定义异常类，只需要创建一个类继承Exception<br>class Error_diy(Exception):<br>    pass<br>"},{"parent":"d441dda086bf","children":[{"parent":"12fce6568820","children":[],"id":"24826476f6a4","title":"使用raise语句处理异常"},{"parent":"12fce6568820","children":[],"id":"bf76c5cd32b1","title":"raise 语句需要跟一个异常类或者异常类的实例"}],"id":"12fce6568820","title":"抛出异常"}],"id":"d441dda086bf","title":"应用"}],"collapsed":true,"link":{"type":"url","title":"异常处理参考代码","value":"https://github.com/LiBigTree/draft/blob/master/basic/%5Bs_8%5D%20try-expect.py"},"id":"3836c4bbf543","title":"异常处理"},{"parent":"root","children":[{"parent":"c968217cfed8","children":[{"parent":"97d83c780da4","children":[],"id":"1912a9d26484","title":"文件，在计算机里一切皆为文件。文件又叫I/O&nbsp; (input/output)<br>python的文件内容就是利用python对计算机里的文件进行一系列的相关操作。"}],"id":"97d83c780da4","title":"定义"},{"parent":"c968217cfed8","children":[{"parent":"48ed8d4a8661","children":[{"parent":"758284c7f64a","children":[],"id":"fc5e9233855f","title":"处理文件的第一步就是将文件作为python处理的对象导入，<br>导入方法是使用open()函数<br>"},{"parent":"758284c7f64a","children":[{"parent":"c1a7ed715c6c","children":[],"id":"ba5f302ca5c4","title":"1、一般打开文件，必选参数是文件的路径<br>之后，不同的情况指定对文件的操作模式、文件的编码<br>"},{"parent":"c1a7ed715c6c","children":[],"id":"91c0d6912f83","title":"2、关于编码：调用open()来打开一个文件，可以将文件分成两种类型<br>一种是纯文本文件（使用utf-8等编码编写的文本文件）<br>一种是二进制文件（图片、mp3、ppt等这些文件）<br>打开文件时默认以文本文件的形式打开的，且默认的编码为None<br>所以处理文本文件时，要指定文件的编码"},{"parent":"c1a7ed715c6c","children":[],"id":"572dad95b124","title":"3、读取模式：<br>* 如果不指定操作类型，则默认是 读取文件 ， 而读取文件时是不能向文件中写入的<br>* r 表示只读的<br>* w 表示是可写的，使用w来写入文件时，如果文件不存在会创建文件，如果文件存在则会截断文件<br>* 截断文件指删除原来文件中的所有内容<br>* a 表示追加内容，如果文件不存在会创建文件，如果文件存在则会向文件中追加内容<br>* x 用来新建文件，如果文件不存在则创建，存在则报错<br>* + 为操作符增加功能 : r+ 即可读又可写，文件不存在会报错<br>附加：<br>t 读取文本文件（默认值）<br>b 读取二进制文件使用open()打开文件时必须要指定打开文件所要做的操作（读、写、追加）&gt; rb/wb...<br>"}],"id":"c1a7ed715c6c","title":"open()<br>open(file, mode='r',encoding='')<br>"}],"id":"758284c7f64a","title":"文件的打开"},{"parent":"48ed8d4a8661","children":[{"parent":"71d250b4de41","children":[{"parent":"b06a1f9bf28a","children":[{"parent":"40a6fb904a76","children":[],"id":"a24e6a79ad68","title":"read()<br>可以接收一个size作为参数，该参数用来指定要读取的字符的数量<br>1、默认值为-1，它会读取文件中的所有字符<br>2、可以为size指定一个值，这样read()会读取指定数量的字符，<br>3、每一次读取都是从上次读取到位置开始读取的<br>4、字符的数量小于size，则会读取剩余所有的<br>5、如果已经读取到了文件的最后了，则会返回''空串"},{"parent":"40a6fb904a76","children":[],"id":"5b68be456804","title":"如果要读取的文件较大的话，<br>会一次性将文件的内容加载到内存中，容易导致内存泄漏<br>所有对于较大的文件，不要直接调用read()"}],"id":"40a6fb904a76","title":"read()方法，用来读取文件中的内容，<br>它会将内容全部保存为一个字符串返回"},{"parent":"b06a1f9bf28a","children":[{"parent":"aaef3bd407bc","children":[],"id":"81f3a37b1930","title":"# readline()<br>    # 该方法可以用来读取一行内容"},{"parent":"aaef3bd407bc","children":[],"id":"66729c6ac14c","title":"&nbsp;# readlines()<br>    # 该方法用于一行一行的读取内容，<br>它会一次性将读取到的内容封装到一个列表中返回"}],"id":"aaef3bd407bc","title":"使用while True/break + read()<br>&nbsp;或for循环 + readline(s)<br>读取"}],"id":"b06a1f9bf28a","title":"读取"},{"parent":"71d250b4de41","children":[{"parent":"a65f03f40f8e","children":[],"id":"dfffde8a0641","title":"seek() 可以修改当前读取的位置<br>第一个 是要切换到的位置<br>第二个 计算位置方式<br>[可选值：]<br>0 从头计算，默认值; 1 从当前位置计算; 2 从最后位置开始计算<br>"},{"parent":"a65f03f40f8e","children":[],"id":"5edd4b848e46","title":"tell() 方法用来查看当前读取的位置"},{"parent":"a65f03f40f8e","children":[{"parent":"c4e78e53ed51","children":[],"id":"f254516cb2c3","title":"os.listdir() 获取指定目录的目录结构<br>&nbsp;需要一个路径作为参数，会获取到该路径下的目录结构，默认路径为 . 当前目录<br>&nbsp;该方法会返回一个列表，目录中的每一个文件（夹）的名字都是列表中的一个元素"},{"parent":"c4e78e53ed51","children":[],"id":"4a730c98b331","title":"os.getcwd() 获取当前所在的目录"},{"parent":"c4e78e53ed51","children":[],"id":"26b9e37cbdb1","title":"os.chdir() 切换当前所在的目录 作用相当于 cd"},{"parent":"c4e78e53ed51","children":[],"id":"3ae425da4edd","title":"os.mkdir(\"test\") 创建目录&nbsp; 在当前目录下创建一个名字为 test 的目录"},{"parent":"c4e78e53ed51","children":[],"id":"0ff174d244d0","title":"os.rmdir('test') 删除目录"},{"parent":"c4e78e53ed51","children":[],"id":"7693fe25200d","title":"os.remove('test.txt') 删除文件"},{"parent":"c4e78e53ed51","children":[],"id":"6e629a41c154","title":"os.rename('旧名字','新名字') <br>可以对一个文件进行重命名，也可以用来移动一个文件"}],"id":"c4e78e53ed51","title":"文件的一些操作和os库搭配使用"}],"id":"a65f03f40f8e","title":"其他方法"}],"id":"71d250b4de41","title":"文件的操作"},{"parent":"48ed8d4a8661","children":[{"parent":"eb33c9f14c94","children":[],"id":"42f5b30cb423","title":"使用 with...as ...子句（上下文管理器）<br>with处理语句会自动关闭文件<br>举例：<br>try:<br>&nbsp; &nbsp; with open(file_name) as file_obj :<br>&nbsp; &nbsp; &nbsp; &nbsp; print(file_obj.read())<br>except FileNotFoundError:<br>&nbsp; &nbsp; &nbsp;print(f'{file_name} 文件不存在~~')<br>"},{"parent":"eb33c9f14c94","children":[],"id":"2ec9f7e4a266","title":"调用close方法"}],"id":"eb33c9f14c94","title":"文件的关闭"}],"id":"48ed8d4a8661","title":"处理流程"}],"collapsed":true,"id":"c968217cfed8","title":"文件"},{"parent":"root","children":[{"parent":"53e49dfead76","children":[{"parent":"facc509936ed","children":[],"id":"f023a560e212","title":"在解决问题的过程，处理的程序会随着问题的复杂而庞大，<br>这时候，为了方便管理维护，就将一个大的程序化整为零，<br>分为一个个小的程序，这个小程序可以独立地实现一些子功能，我们称之为模块。"},{"parent":"facc509936ed","children":[{"parent":"2b60011fd87d","children":[],"id":"0890ec945382","title":"1、可以在模块中定义变量、函数、类<br>2、模块中定义私有变量的方法： 加下划线_ 只能内部访问，不能外部访问"}],"id":"2b60011fd87d","title":"一个模块即为一个py文件"}],"id":"facc509936ed","title":"定义：程序模块化"},{"parent":"53e49dfead76","children":[{"parent":"a81149859dc3","children":[{"parent":"011f6545c042","children":[{"parent":"78f7d5b5e201","children":[],"id":"43f2c250fee3","title":"关于测试：<br>__name__为当前模块的名字，对于程序的执行，<br>一个大程序只有一个主模块，为__main__，<br>所以在程序中添加__main__的if控制语句，只有当前模块作为主程序时，<br>模块才会执行,具体语句是：<br>if __name__ = 'main' :"}],"id":"78f7d5b5e201","title":"[导包区]<br>[变量区]<br>[函数区]<br>[类区]<br>[测试区]"}],"id":"011f6545c042","title":"模块的结构"},{"parent":"a81149859dc3","children":[{"parent":"fc90a9b39a6f","children":[{"parent":"4fc18d6d331e","children":[{"parent":"c7b5894d61fd","children":[],"id":"157484fd5374","title":"对应调用举例：<br>import math<br>math.sqrt(4)"}],"id":"c7b5894d61fd","title":"导入指定模块 import module"},{"parent":"4fc18d6d331e","children":[{"parent":"6bd5afe49e72","children":[],"id":"dff47b0e2465","title":"对应调用：<br>function1（object）"}],"id":"6bd5afe49e72","title":"1、从模块导入指定函数 <br>from module import function1，function2，...<br>2、从模块导入所有函数 <br>from module import * （不推荐这种引入，使用__all__可以查看*的内容）"}],"id":"4fc18d6d331e","title":"直接导"},{"parent":"fc90a9b39a6f","children":[{"parent":"3db4f4355766","children":[{"parent":"e05a7d4373bb","children":[],"id":"da1ef9da38e1","title":"对应调用举例<br>sqrt（4）"}],"id":"e05a7d4373bb","title":"指定别名导入 例如 <br>from math import sqrt as sqrt<br>import numpy as np"}],"id":"3db4f4355766","title":"指定别名"}],"id":"fc90a9b39a6f","title":"模块的导入"}],"id":"a81149859dc3","title":"性质"},{"parent":"53e49dfead76","children":[{"parent":"973a23d951e6","children":[{"parent":"64d7d2b0d04c","children":[],"id":"9f4a1429a9ad","title":"1、查看模块本身<br>dir()<br>__all__"},{"parent":"64d7d2b0d04c","children":[],"id":"6700200206d4","title":"2、使用help命令查看功能介绍"},{"parent":"64d7d2b0d04c","children":[],"id":"d6b46dcad357","title":"3、查询模块的官方文档"},{"parent":"64d7d2b0d04c","children":[],"id":"ab3be376802d","title":"4、查看模块源代码<br>使用模块.__file__查找文件位置"}],"id":"64d7d2b0d04c","title":"探索第三方模块"},{"parent":"973a23d951e6","children":[{"parent":"42d1d11fc83d","children":[],"id":"cb12e99aeea3","title":"pprint 格式化打印的内容"},{"parent":"42d1d11fc83d","children":[{"parent":"753848d93ba0","children":[],"id":"dc8e316fd543","title":"sys.agv 获取命令行参数"},{"parent":"753848d93ba0","children":[],"id":"4c2cacd8ef9a","title":"sys.modules 以字典形式查看当前引入的模块内容"},{"parent":"753848d93ba0","children":[],"id":"da77f1433bca","title":"sys.path 文件的搜索路径"},{"parent":"753848d93ba0","children":[],"id":"1fb2481b3093","title":"sys.platform 查看运行平台"}],"id":"753848d93ba0","title":"sys 系统相关模块"},{"parent":"42d1d11fc83d","children":[{"parent":"45881331ced7","children":[],"id":"60e7c3b8bfaa","title":"os.environ 环境变量"},{"parent":"45881331ced7","children":[],"id":"b03039c64410","title":"os.system 执行操作系统命令"}],"id":"45881331ced7","title":"os"},{"parent":"42d1d11fc83d","children":[],"id":"625caa9e6e9a","title":"更多标准模块可以查看官网标准文档<br>random、time......"}],"id":"42d1d11fc83d","title":"常用标准库（模块）"},{"parent":"973a23d951e6","children":[{"parent":"247226b47efe","children":[{"parent":"268da520b713","children":[],"id":"d948d0a78354","title":"使用 pip install [指定的包名字[版本]]命令下载<br>下载地址一般再pypi.org<br>本源的下载法是去python第三方库的发布网站下载<br>文件（一般是去找wheel文件），然后在本地pip install xx.whl即可"}],"id":"268da520b713","title":"pip下载/conda下载<br>"}],"id":"247226b47efe","title":"下载第三方模块"}],"id":"973a23d951e6","title":"模块相关应用"},{"parent":"53e49dfead76","children":[{"parent":"e92384448a42","children":[],"id":"81b17c84222c","title":"模块是一个文件，包就是管理模块文件的文件夹<br>相关的功能放在一块，方便管理维护"},{"parent":"e92384448a42","children":[],"id":"35a7ce7bb73c","title":"包的设置必须要有一个__init__文件"},{"parent":"e92384448a42","children":[{"parent":"cc29b57887e5","children":[],"id":"2e59b904cf87","title":"python执行过程中解析器会将python文件转化为机器码执行，<br>为了提高效率，在第一次执行时，机器码文件会被保存在__pycache__文件里"}],"id":"cc29b57887e5","title":"__pycache__文件"}],"id":"e92384448a42","title":"包"}],"link":{"type":"url","title":"模块和包参考代码","value":"https://github.com/LiBigTree/draft/blob/master/basic/%5Bs_9%5D%20module.py"},"id":"53e49dfead76","title":"模块&gt;包"},{"parent":"root","children":[{"parent":"34a4280fceec","children":[],"link":{"type":"url","title":"IDE使用参考","value":"https://github.com/LiBigTree/draft/blob/master/basic/%5Bs_add%5D%20usage.py"},"id":"8d1d4d709f57","title":"pycharm操作技巧"}],"id":"34a4280fceec","title":"工具使用"}],"children":[{"parent":"root","children":[{"parent":"41b038814093","children":[{"parent":"073e20f82add","children":[{"parent":"756e015dd03b","children":[],"id":"31d1d1d7cd3d","title":"命令行窗口与python交互 cmd&gt;python，或者用python自带的交互解释器","summaries":[]},{"parent":"756e015dd03b","children":[],"id":"09006b6af7e6","title":"算法是由对象加语句组成。<br>类比做一盘西红柿炒鸡蛋，西红柿、鸡蛋、韭菜电等原料是对象，<br>如何加鸡蛋、炒菜指定的火候等等操作说明是语句，组合起来成了一盘美味佳肴。","summaries":[]},{"parent":"756e015dd03b","children":[],"id":"de74e3268334","title":"写项目用pycharm管理比较好，学习知识记忆用类似jupyter notebook比较好","summaries":[]}],"id":"756e015dd03b","title":"预备知识","summaries":[]},{"parent":"073e20f82add","children":[{"parent":"322913f5ac80","children":[],"id":"bf75be1cd1e4","title":"int 例如 2","summaries":[]},{"parent":"322913f5ac80","children":[],"id":"76acacf27053","title":"bool型 True和False 本质是1和0，在判断时使用","summaries":[]}],"id":"322913f5ac80","title":"整型","summaries":[]},{"parent":"073e20f82add","children":[{"parent":"5c8c8512e36b","children":[],"id":"4111e345d895","title":"float 例如 2.3","summaries":[]}],"id":"5c8c8512e36b","title":"实型","summaries":[]},{"parent":"073e20f82add","children":[{"parent":"6b0cb58c71d7","children":[],"id":"e3ea36626671","title":"分为实部和虚部 j是标识，例如：2+3j 调用实部用real，虚部用imag，共轭为conjugate","summaries":[]}],"id":"6b0cb58c71d7","title":"复数型","summaries":[]},{"parent":"073e20f82add","children":[{"parent":"ebc20f057633","children":[],"id":"3452d62b36af","title":"运算类型之一，+、 -、 *、 /、 //、 %、** <br>这里注意整除是向下圆整还是向上圆整，方法是在python里敲一敲&nbsp;","summaries":[]}],"id":"ebc20f057633","title":"算数运算","summaries":[]},{"parent":"073e20f82add","children":[{"parent":"809053a2e3c8","children":[],"id":"fcee9a4f7e9e","title":" 类型查看用type()函数","summaries":[]},{"parent":"809053a2e3c8","children":[{"parent":"6a789de1f5a1","children":[{"parent":"85364c5b9e7f","children":[],"id":"651b59dc5c97","title":"0b1011010010","summaries":[]}],"id":"85364c5b9e7f","title":"二进制&nbsp;","summaries":[]},{"parent":"6a789de1f5a1","children":[{"parent":"440a89b02a83","children":[],"id":"acfa6023cb47","title":"0o10","summaries":[]}],"id":"440a89b02a83","title":"八进制","summaries":[]},{"parent":"6a789de1f5a1","children":[{"parent":"eb3d6bee6711","children":[],"id":"4bcd7f20f742","title":"0xAF","summaries":[]}],"id":"eb3d6bee6711","title":"十六进制","summaries":[]}],"id":"6a789de1f5a1","title":"关于进制只需要记住名字","summaries":[]},{"parent":"809053a2e3c8","children":[{"parent":"e912725fa037","children":[],"id":"fbeb9aa40ad9","title":"在编写程序的过程中，我们通过<br>变量控制计算机中的对象，变量在我们和内存之间建立了一种操作的关联。","summaries":[]},{"parent":"e912725fa037","children":[],"id":"8bb0b44c1fe2","title":"变量通过一个等号赋值（建立关联）","summaries":[]},{"parent":"e912725fa037","children":[],"id":"8d05c1c8a54b","title":"变量的命名有两种方式：一个是描述+在描述之间加下划线：face_dectector<br>一个是描述之间首字母大写隔开：FaceOperate","summaries":[]},{"parent":"e912725fa037","children":[],"id":"242839aceb9d","title":"python里面有一些关键字不能作为变量名，可以在python里查看有哪些：<br>import keyword; print(list(keyword.kwlist))","summaries":[]}],"id":"e912725fa037","title":"变量","summaries":[]},{"parent":"809053a2e3c8","children":[{"parent":"4a6f3a86377c","children":[],"id":"51ac8eae43ce","title":"input(\"\")<br>返回的对象是字符串","summaries":[]}],"id":"4a6f3a86377c","title":"获取用户输入的函数：","summaries":[]},{"parent":"809053a2e3c8","children":[{"parent":"c0d8dd695fe9","children":[],"id":"6c56d35529fd","title":"函数是一类语句的组合，完成某一特定的功能的映射。在python里分为如下四种：<br>内置函数：直接调用<br>标准库函数：python有一些函数的集合因为经常使用，就作为标准库成为python的一部分，每一个标准库就是一类功能的集合，库之下的函数叫做标准库函数。使用时需要导入程序调用。<br>第三方库函数：第三方库是对python内容的拓展，也是其强大的原因之一，其中的函数叫做第三方函数，使用某一第三方库需要我们从官网（pypi）或镜像站去下载，然后安装到本地导入使用。<br>自定义函数：我们也可以在python根据自己的需求定制函数，这便叫做自定义函数。","summaries":[]}],"id":"c0d8dd695fe9","title":"函数","summaries":[]},{"parent":"809053a2e3c8","children":[{"parent":"4a3564a833fe","children":[],"id":"9f43426b6e10","title":"一个模块是一个py文件，是处理一类问题的函数的集合，<br>例如math模块是数学常用操作函数的集合<br>一些模块组成功能集合的一个大类，就叫做包。<br>函数&gt;模块&gt;包是在逻辑上递进的，而库是外来引入的叫法，<br>math模块也被叫做math库，库的概念对学习无实际影响。<br>","summaries":[]}],"id":"4a3564a833fe","title":"模块、包","summaries":[]},{"parent":"809053a2e3c8","children":[{"parent":"95e1cab59815","children":[],"id":"247d86e48cb2","title":"用 # 之后的内容表示注释，不会被程序执行<br>写好有用的注释（直至要点，忌讳啰嗦）有利于程序的维护","summaries":[]}],"id":"95e1cab59815","title":"注释","summaries":[]}],"id":"809053a2e3c8","title":"备注：","summaries":[]}],"id":"073e20f82add","title":"数值","summaries":[]},{"parent":"41b038814093","children":[{"parent":"67e7bf799ad2","children":[],"id":"8bea29576460","title":"int(x) 将x转换为整数","summaries":[]},{"parent":"67e7bf799ad2","children":[],"id":"9b6ff17d06d8","title":"float(x) 将x转换为浮点数","summaries":[]},{"parent":"67e7bf799ad2","children":[],"id":"2c4432bfd63b","title":"str(x) 将x转换为字符串","summaries":[]}],"id":"67e7bf799ad2","title":"类型转换","summaries":[]},{"parent":"41b038814093","children":[{"parent":"b05ee52c378d","children":[{"parent":"5b58183ec4d4","children":[],"id":"7a1bc45f32cf","title":"序列是依循数字编号排列的元素集合，在python中序列有字符串、列表、元组。<br>特点是这些对象里的元素是通过其位置（又叫索引）提取。","summaries":[]},{"parent":"5b58183ec4d4","children":[],"id":"f732d23c7c7b","title":"序列通用操作有索引、切片、相加、相乘、成员资格检查<br>还有一个通用操作：迭代 ，对序列迭代就是对其中每一个元素执行特定的操作，<br>在控制语句部分中学习","summaries":[]},{"parent":"5b58183ec4d4","children":[],"id":"8ac80a0f5399","title":"python还提供一些内置函数<br>len：确定序列长度<br>max/min： 找出序列中最大、最小的元素","summaries":[]},{"parent":"5b58183ec4d4","children":[],"id":"143b0f91f923","title":"一般来说，使用列表足以满足对序列的需求","summaries":[]}],"id":"5b58183ec4d4","title":"序列","summaries":[]},{"parent":"b05ee52c378d","children":[{"parent":"c7ef971feb88","children":[],"id":"e1f44d98c5c7","title":"字符串是表达文本信息的序列。通过单引、双引号、三引号来定义<br>"}],"id":"c7ef971feb88","title":"字符串的定义与创建","summaries":[]},{"parent":"b05ee52c378d","children":[{"parent":"6f711b7d92ca","children":[{"parent":"6c6032cd28f5","children":[{"parent":"b5302cbd8ce7","children":[],"id":"05d82a174bf3","title":"找出特定的某个元素<br>例如，g = 'hello'<br>g[0] = 'h'","summaries":[]},{"parent":"b5302cbd8ce7","children":[],"id":"c0be17b08bc0","title":"索引是从0开始，表示相对偏移量","summaries":[]}],"id":"b5302cbd8ce7","title":"索引&nbsp;","summaries":[]},{"parent":"6c6032cd28f5","children":[{"parent":"b11a17ceaf4d","children":[],"id":"833fa254ee3c","title":"用来访问提取特定范围内的元素","summaries":[]},{"parent":"b11a17ceaf4d","children":[],"id":"061b0dc0139f","title":"使用两个索引选取边界，用冒号（：）分隔。<br>1、其中第一个索引指定的元素在切片内，<br>第二个索引指定的不在切片内。&nbsp;<br>2、不指定索引时，就是从开头开始到结尾。<br>例如： x = 'hello'&nbsp; x[:]就是hello ，x[1:]就是ello<br><br>","summaries":[]},{"parent":"b11a17ceaf4d","children":[],"id":"a12a71fce7a7","title":"切片还有第三个参数，步长<br>var[start:end:step]<br>步长就是在提取元素时每次移动的距离，默认是1<br>注意的是步长可以为负，表示从右向左提取元素。","summaries":[]}],"id":"b11a17ceaf4d","title":"切片","summaries":[]},{"parent":"6c6032cd28f5","children":[{"parent":"bf91d3fd7580","children":[],"id":"158d7ee88a80","title":"使用加号可以将两个同类型的序列拼接","summaries":[]}],"id":"bf91d3fd7580","title":"相加&nbsp;","summaries":[]},{"parent":"6c6032cd28f5","children":[{"parent":"11f22cf59a43","children":[],"id":"2784838525c3","title":"对序列用数字n相乘时，表示重复n次创建一个新序列<br>","summaries":[]}],"id":"11f22cf59a43","title":"相乘&nbsp;","summaries":[]},{"parent":"6c6032cd28f5","children":[{"parent":"756eae8a9f0f","children":[],"id":"380f51109885","title":"使用运算符in，检查特定的值是否包含在序列中，<br>如果在序列中，返回True；反之返回False","summaries":[]}],"id":"756eae8a9f0f","title":"成员资格检查","summaries":[]}],"id":"6c6032cd28f5","title":"通用操作","summaries":[]},{"parent":"6f711b7d92ca","children":[{"parent":"dce39d85528a","children":[{"parent":"1338952ab3b9","children":[],"id":"d6e20f8b3381","title":"方法类似于函数，给对象某种操作，格式：<br>object.method(arguments)<br>例如lst = [1,2,3]<br>&nbsp;lst.append（4）<br>我们首先有了一个lst对象，方法就是对lst对象执行句点后面的操作，<br>这个例子是把数字4附加到列表里面去","summaries":[]}],"id":"1338952ab3b9","title":"方法","summaries":[]},{"parent":"dce39d85528a","children":[{"parent":"85b94f0f1b86","children":[],"id":"0c5290019986","title":"字符串有许多方法，可以在官网或者使用help命令学习","summaries":[]},{"parent":"85b94f0f1b86","children":[],"id":"e313593cff30","title":"两边填充使得字符串居中 center","summaries":[]},{"parent":"85b94f0f1b86","children":[],"id":"33be4f91adc6","title":"字符串中查找子串并返回子串第一个字符的索引（没找到时返回-1） find","summaries":[]},{"parent":"85b94f0f1b86","children":[],"id":"8504b8c9757e","title":"合并字符串的元素&nbsp; join","summaries":[]},{"parent":"85b94f0f1b86","children":[],"id":"2eca36c50628","title":"将字符串拆分为序列 split","summaries":[]},{"parent":"85b94f0f1b86","children":[],"id":"4e410d9653e9","title":"返回字符串的小写版本 lower"},{"parent":"85b94f0f1b86","children":[],"id":"d007891383eb","title":"将指定字符串替换为另一个字符串，并返回替换后的结果 replace"},{"parent":"85b94f0f1b86","children":[],"id":"955064c9e335","title":"创建一个转换表，然后进行单字符替换 maketrans/translate"},{"parent":"85b94f0f1b86","children":[],"id":"b8d656db4048","title":"删除字符串开头和末尾的空白，并返回删除后的结果&nbsp;"},{"parent":"85b94f0f1b86","children":[],"id":"a8798e34be16","title":"还有一些以is打头的字符串方法判断字符串是否具有某种特定的性质"}],"id":"85b94f0f1b86","title":"字符串方法","summaries":[]}],"id":"dce39d85528a","title":"字符串的方法","summaries":[]},{"parent":"6f711b7d92ca","children":[{"parent":"20916bdcad16","children":[],"id":"ff5276aaf226","title":"转义字符&nbsp; 反斜杠加字符，有特殊的表达含义<br>\\n 换行<br>\\” 双引号<br>......","summaries":[]},{"parent":"20916bdcad16","children":[],"id":"3f0e72ab3399","title":"在表达路径时，加上r防止转义字符的影响，使得输出保持不变<br>例如：<br>r'C:\\nowhere'","summaries":[]}],"id":"20916bdcad16","title":"其他使用","summaries":[]}],"id":"6f711b7d92ca","title":"字符串性质与使用","summaries":[]},{"parent":"b05ee52c378d","children":[{"parent":"3f764e6ae789","children":[{"parent":"d925f32b7a1b","children":[],"id":"b317b7934f9f","title":"在%左边指定一个字符串（格式字符串），并在右边指定要设置其格式的值<br>1、设置格式的值可以使用单个值、元组（最常见）和字典<br>2、转换说明符 :<br>%s 以字符串形式显示对象<br>%.3f 以包含3位小数的浮点数显示对象<br>%i 以整型的形式显示对象<br>......(有专门的类型说明符表)","summaries":[]}],"id":"d925f32b7a1b","title":"用类似C语言中的printf函数设置&nbsp;","summaries":[]},{"parent":"3f764e6ae789","children":[{"parent":"1c669e83893f","children":[],"id":"0b0899b1c81c","title":"格式设置有两个要素：<br>1、原字符串中，叫做占位符，参数是对要填充内容的格式说明<br>2、调用方法format中的内容，叫做替换字段，在占位符的位置负责替换<br>一句话总结：使用要插入字符串中的值去代替字符串里的用花括号括起的替换字段","summaries":[]},{"parent":"1c669e83893f","children":[],"id":"dc1c402acbd4","title":"例如：<br>fullname = [\"Alfred\", \"Smoketoomuch\"]<br>print(\"Mr {name[1]}\".format(name=fullname))","summaries":[]},{"parent":"1c669e83893f","children":[],"id":"dde81cb23dec","title":"替换字段的组成：（每一部分都是可选的）<br>字段名（索引或者标识符）+转换标志（跟在叹号后面的单个字符 有r s a三种）<br>+ 格式说明符（跟在冒号后面的表达式，可以指定格式类型、字段宽度、数的精度、符号显示、千位分隔符、对齐和填充方式）","summaries":[]},{"parent":"1c669e83893f","children":[],"id":"84c911ea7ad1","title":"关于格式说明符顺序：<br>[对齐说明符][符号说明符][最小宽度说明符][.精度说明符][类型说明符]","summaries":[]}],"id":"1c669e83893f","title":"用占位符format方法","summaries":[]}],"id":"3f764e6ae789","title":"字符串格式设置","summaries":[]}],"link":{"type":"url","title":"字符串相关代码参考","value":"https://github.com/LiBigTree/draft/blob/master/basic/%5Bs_1%5Dsequence1.py"},"id":"b05ee52c378d","title":"字符串","summaries":[]},{"parent":"41b038814093","children":[{"parent":"554b61cb5332","children":[{"parent":"3681a5b9b9dc","children":[],"id":"b832b4f84c56","title":"列表是序列的一种，其中可以放置任何对象，特点是元素可修改。<br>1、通过[]创建 x = [1, 'a', [1,‘a’]]<br>2、通过内置函数list转换 例如 list('hello')&gt; ['h', 'e', 'l','l','o']<br>"}],"id":"3681a5b9b9dc","title":"列表的定义与创建","summaries":[]},{"parent":"554b61cb5332","children":[{"parent":"47b9e6cc2bc0","children":[],"id":"237331d48e91","title":"序列标准操作：索引、切片、拼接、相乘","summaries":[]},{"parent":"47b9e6cc2bc0","children":[{"parent":"45870ec18ac3","children":[],"id":"fc8652895f09","title":"可以直接赋值","summaries":[]},{"parent":"45870ec18ac3","children":[],"id":"4c09792e76da","title":"使用del语句删除元素","summaries":[]},{"parent":"45870ec18ac3","children":[],"id":"c5c6ea879fe8","title":"给切片赋值，直接赋值的升级版","summaries":[]}],"id":"45870ec18ac3","title":"修改列表","summaries":[]},{"parent":"47b9e6cc2bc0","children":[{"parent":"8549dad44546","children":[],"id":"506a7cbf9a28","title":"1、 附加对象 append方法","summaries":[]},{"parent":"8549dad44546","children":[],"id":"76a0e2bb5709","title":"2、清空列表内容 clear方法","summaries":[]},{"parent":"8549dad44546","children":[],"id":"9b5530407e15","title":"3、复制列表（这种复制是将另一个名称关联到列表）copy方法<br>","summaries":[]},{"parent":"8549dad44546","children":[],"id":"43554e6c36da","title":"4、计算指定元素出现次数 count方法","summaries":[]},{"parent":"8549dad44546","children":[],"id":"acc73d1fb325","title":"5、将多个值附加到列表(多个值通常是以列表的形式附加) extend方法","summaries":[]},{"parent":"8549dad44546","children":[],"id":"6b0195067a77","title":"6、在列表中查找指定值第一次出现的索引 index方法","summaries":[]},{"parent":"8549dad44546","children":[],"id":"818c7b753390","title":"7、将一个对象插入列表 insert方法","summaries":[]},{"parent":"8549dad44546","children":[],"id":"d77cfd879a87","title":"8、从列表中删除一个元素，并返回这个元素 pop方法","summaries":[]},{"parent":"8549dad44546","children":[],"id":"f7ac700c7281","title":"9、删除第一个为指定值的元素 remove方法","summaries":[]},{"parent":"8549dad44546","children":[],"id":"17d6cf9db503","title":"10、按照相反的顺序排列列表中的元素 reverse方法","summaries":[]},{"parent":"8549dad44546","children":[],"id":"789dc36b2467","title":"11、对列表元素进行排序 sort方法","summaries":[]},{"parent":"8549dad44546","children":[{"parent":"7b139c30f202","children":[],"id":"9aeaf3767eed","title":"* 通过help（list）可以查看方法<br>* 除了pop方法外，其他方法都不返回值，只是对列表进行了操作修改"}],"id":"7b139c30f202","title":"备注：","summaries":[]}],"id":"8549dad44546","title":"列表的方法","summaries":[]}],"id":"47b9e6cc2bc0","title":"列表的性质与使用","summaries":[]}],"link":{"type":"url","title":"列表、元组相关代码参考","value":"https://github.com/LiBigTree/draft/blob/master/basic/%5Bs_2%5D%20sequence2.py"},"id":"554b61cb5332","title":"列表","summaries":[]},{"parent":"41b038814093","children":[{"parent":"e39ecd9563cc","children":[{"parent":"ef737609c66a","children":[],"id":"336273ceaf87","title":"元组是不可修改的序列，<br>1、创建用小括号()，值用逗号分隔开<br>2、通过tuple(), 将序列转化为元组"}],"id":"ef737609c66a","title":"元组的定义与创建","summaries":[]},{"parent":"e39ecd9563cc","children":[{"parent":"b50c5279c5d0","children":[],"id":"7b610d6e623e","title":"元组用作映射中的键和集合中的成员","summaries":[]},{"parent":"b50c5279c5d0","children":[],"id":"98b579f9b15d","title":"一些内置函数和方法返回的对象是元组，我们需要知道元组才能去处理它们。","summaries":[]}],"id":"b50c5279c5d0","title":"元组的使用","summaries":[]}],"id":"e39ecd9563cc","title":"元组","summaries":[]},{"parent":"41b038814093","children":[{"parent":"760bae08a7b7","children":[{"parent":"03c53144cd4d","children":[],"id":"97bdd5304dea","title":"序列是通过数值编号来访问元素位置，类比这个概念，映射是通过名称访问元素的位置。<br>建立了一种键-值对应的关系，通过键来访问对应的值。键可能是数、字符串或者元组。"}],"id":"03c53144cd4d","title":"映射","summaries":[]},{"parent":"760bae08a7b7","children":[{"parent":"e90d65cc9964","children":[],"id":"aad041ca6563","title":"1、用{}来创建字典，其中有键和值，用冒号对应起来。&nbsp;<br>键-值对称作项，其中键是唯一的，值不用<br>2、dict可以从其他映射（其他字典）或者键值对序列创建字典<br>"}],"id":"e90d65cc9964","title":"字典的定义与创建","summaries":[]},{"parent":"760bae08a7b7","children":[{"parent":"304003820339","children":[{"parent":"26701aef6ba6","children":[{"parent":"7ae0107ca706","children":[],"id":"9ea7b4929afe","title":"返回字典d包含的项（键-值对）的个数 len(d)"},{"parent":"7ae0107ca706","children":[],"id":"eacd0ec5e49c","title":"d[k] 返回与键相关联的值"},{"parent":"7ae0107ca706","children":[],"id":"c4c1826e9c33","title":"d[k] = v&nbsp; 将值v关联到键k"},{"parent":"7ae0107ca706","children":[],"id":"6b5a4c8a21cd","title":"del d[k] 删除键为k的项"},{"parent":"7ae0107ca706","children":[],"id":"d9fac91c8731","title":"k in d 检查字典是否包含键为k的项"}],"id":"7ae0107ca706","title":"类比序列的性质"},{"parent":"26701aef6ba6","children":[{"parent":"92118208bdce","children":[],"id":"4c38123308c1","title":"键的类型 可以是整数、浮点数、字符串、元组等等不可变的类型"},{"parent":"92118208bdce","children":[],"id":"3e83c5c5df80","title":"字典中没有的键将自动在字典中创建，而序列中是不能的"},{"parent":"92118208bdce","children":[],"id":"dbf2b58d6d71","title":"成员资格在字典中查找的是键，在序列中查找的是值。"}],"id":"92118208bdce","title":"不同于序列的基本性质&nbsp;"}],"collapsed":true,"id":"26701aef6ba6","title":"基本性质"},{"parent":"304003820339","children":[{"parent":"893dfb64959c","children":[],"id":"276781bd70ba","title":"1、删除所有的字典项 &gt; clear"},{"parent":"893dfb64959c","children":[{"parent":"9e5cb60a9984","children":[],"id":"9659a02fbd48","title":"浅复制 返回一个新字典，但字典值关联的是原值 &gt; copy"},{"parent":"9e5cb60a9984","children":[],"id":"94e0a23a1304","title":"深复制 复制值和键 从copy模块导入函数 &gt; deepcopy （from copy import deepcopy）"}],"id":"9e5cb60a9984","title":"2、复制&nbsp;&nbsp;"},{"parent":"893dfb64959c","children":[],"id":"751a61dd5285","title":"3、创建一个字典，键为指定的键、值对应为none（也可以提供特定的值）&gt; fromkeys"},{"parent":"893dfb64959c","children":[],"id":"0dcc7c7248f2","title":"4、访问字典中的项，字典中没有这一项时会返回none，也可以自己指定返回值 &gt; get"},{"parent":"893dfb64959c","children":[],"id":"6fc8dd9f998c","title":"5、获取指定键关联的值，当指定的键不存在时，添加指定的键值对并更新字典,<br>没有指定时，默认是none &gt;&nbsp; setdefault"},{"parent":"893dfb64959c","children":[],"id":"6a3cf64520c5","title":"6、将字典里的键值对以元组（key, value）的形式返回,叫做字典视图，可以用于迭代 &gt; items<br>"},{"parent":"893dfb64959c","children":[],"id":"1e96530836ab","title":"7、获取为指定字典的键的字典视图 &gt; keys"},{"parent":"893dfb64959c","children":[],"id":"1e9cb75dd5e5","title":"8、获取一个由字典中的值组成的字典视图 &gt; values&nbsp;"},{"parent":"893dfb64959c","children":[],"id":"81b95760686b","title":"9、获取指定键关联的值，并删除该键值对 &gt; pop"},{"parent":"893dfb64959c","children":[],"id":"393117ae154c","title":"10、”随机“弹出一个字典项并删除 &gt; popitem"},{"parent":"893dfb64959c","children":[],"id":"3a66310c580b","title":"11、使用一个字典中的项来更新另一个字典（python3.9此处有更新）&gt; update"}],"id":"893dfb64959c","title":"字典方法"},{"parent":"304003820339","children":[{"parent":"977458d4e7e5","children":[],"id":"b7bb423a2d98","title":"使用 format_map 通过一个映射设置"}],"id":"977458d4e7e5","title":"字典格式设置"}],"id":"304003820339","title":"字典的性质与使用","summaries":[]}],"link":{"type":"url","title":"字典和集合相关代码参考","value":"https://github.com/LiBigTree/draft/blob/master/basic/%5Bs_3%5D%20dict.py"},"id":"760bae08a7b7","title":"字典","summaries":[]},{"parent":"41b038814093","children":[{"parent":"48572d609d25","children":[{"parent":"a8832c53fd6e","children":[],"id":"7b5a4b9efbf3","title":"1、使用{}来创建<br>2、使用set函数创建<br>set()也可以将序列和字典转化为集合，其中字典只提取其中的键"}],"id":"a8832c53fd6e","title":"集合的定义与创建","summaries":[]},{"parent":"48572d609d25","children":[{"parent":"9a981a7dff60","children":[{"parent":"f83d43946fab","children":[],"id":"9e075087aad5","title":"使用in和not in来检查集合中的元素"},{"parent":"f83d43946fab","children":[],"id":"4ecf7447a56b","title":"使用len()来获取集合中元素的数量"}],"id":"f83d43946fab","title":"性质"},{"parent":"9a981a7dff60","children":[{"parent":"30696ea8ea76","children":[],"id":"fe3c4fd7c6a3","title":"add() 向集合中添加元素"},{"parent":"30696ea8ea76","children":[{"parent":"745776c6499f","children":[],"id":"a2dc8938333f","title":"可以传递序列或字典作为参数，字典只会使用键"}],"id":"745776c6499f","title":"update() 将一个集合中的元素添加到当前集合中"},{"parent":"30696ea8ea76","children":[],"id":"288edc2ceb01","title":"pop()随机删除并返回一个集合中的元素"},{"parent":"30696ea8ea76","children":[],"id":"3023ac095425","title":"remove()删除集合中的指定元素"},{"parent":"30696ea8ea76","children":[],"id":"3ecf7aaeb916","title":"clear()清空集合"},{"parent":"30696ea8ea76","children":[],"id":"2bd8ff023c50","title":" copy()对集合进行浅复制"}],"id":"30696ea8ea76","title":"方法"},{"parent":"9a981a7dff60","children":[{"parent":"9c495c11ac66","children":[],"id":"b45bf29c1678","title":"&amp; 交集运算"},{"parent":"9c495c11ac66","children":[],"id":"aac7432a13e4","title":"| 并集运算"},{"parent":"9c495c11ac66","children":[],"id":"bf7253e36231","title":"- 差集"},{"parent":"9c495c11ac66","children":[],"id":"12932af49440","title":"^ 异或集 获取只在一个集合中出现的元素"},{"parent":"9c495c11ac66","children":[],"id":"17189e8a0c66","title":"&lt;= 检查一个集合是否是另一个集合的子集<br>（* 如果a集合中的元素全部都在b集合中出现，<br>那么a集合就是b集合的子集，b集合是a集合超集）"},{"parent":"9c495c11ac66","children":[],"id":"7c61654c6227","title":"&lt; 检查一个集合是否是另一个集合的真子集<br>（* 如果超集b中含有子集a中所有元素，<br>并且b中还有a中没有的元素，则b就是a的真超集，a是b的真子集）"},{"parent":"9c495c11ac66","children":[],"id":"4123e213b8d7","title":"&gt;= 检查一个集合是否是另一个的超集<br>&gt; 检查一个集合是否是另一个的真超集"}],"id":"9c495c11ac66","title":"运算<br>在对集合做运算时，<br>不会影响原来的集合，<br>而是返回一个运算结果<br>"}],"id":"9a981a7dff60","title":"集合的性质","summaries":[]}],"id":"48572d609d25","title":"集合","summaries":[]}],"collapsed":true,"id":"41b038814093","title":"数据类型","summaries":[]},{"parent":"root","children":[{"parent":"073d78604816","children":[{"parent":"201d94074619","children":[{"parent":"10d5ca072c74","children":[{"parent":"65f009319054","children":[],"id":"12a8b68c88ab","title":"用来打印一个或者多个表达式，当打印多个表达式时，用逗号分隔开"},{"parent":"65f009319054","children":[],"id":"e630cc515f58","title":"打印多个表达式默认在表达式之间插入空格字符，<br>如果需要可以自定义分隔符：seq=\"_\"(设置分隔符为下划线)"},{"parent":"65f009319054","children":[],"id":"c96d5d05e847","title":"print的结束字符串是换行符，可以指定结束字符串。 end=''(指定结束字符串为空字符串)"}],"id":"65f009319054","title":"print"},{"parent":"10d5ca072c74","children":[{"parent":"2cc8f79c23c6","children":[],"id":"13ff72abf992","title":"将一个序列（可迭代对象就可以）的元素解包，然后将这些值储存到一系列变量中"},{"parent":"2cc8f79c23c6","children":[],"id":"87edb8388c57","title":"1. 可以同时给多个变量赋值 x, y, z = 1, 2, 3<br>2. 可以交换变量 x,y = y,x<br>3. 一些函数（方法）返回对象为元组，便可以用序列解包，将返回内容解包到对应的变量中<br>解包多余的值可以用星号收集 a, b, *rest = [1, 2, 3, 4] &gt; a = 1, b = 2, rest = [3, 4]&nbsp;"}],"id":"2cc8f79c23c6","title":"序列解包"},{"parent":"10d5ca072c74","children":[{"parent":"05ecd40291f5","children":[],"id":"aaa9bb5d8174","title":"例如 x = x + 1可以简写为 x += 1<br>这种写法叫做增强赋值，适用于所有标准运算符"}],"id":"05ecd40291f5","title":"赋值的简写&nbsp;"},{"parent":"10d5ca072c74","children":[{"parent":"d6f9c6d36cac","children":[],"id":"157a1b8d6984","title":"1. 代码块是一组语句，在控制语句的作用下执行。<br>2. 代码块通过缩进来表示<br>3. 在python中，通过冒号(:)指出接下来是一个代码块<br>"}],"id":"d6f9c6d36cac","title":"代码块"}],"id":"10d5ca072c74","title":"写在控制语句之前","summaries":[]},{"parent":"201d94074619","children":[{"parent":"4ab5e783523a","children":[],"id":"7415c4d6c8f8","title":"定义：条件语句，通过判断真假执行相应的内容<br>"},{"parent":"4ab5e783523a","children":[{"parent":"3663a34a4b47","children":[{"parent":"81f787ef7851","children":[],"id":"1a06a35b03f6","title":"假：<br>标准值False和None、<br>各种类型（浮点数、复数等）的数值0、<br>空序列（空字符串、空列表、空元组）、<br>空映射（空字典）<br>* 备注：假与假之间并不相等，即[] != \"\""},{"parent":"81f787ef7851","children":[],"id":"00ce5ca682cd","title":"真：除了上述假之外的其他各种值，标准值是True"},{"parent":"81f787ef7851","children":[],"id":"c866520f0f53","title":"可以使用函数bool来将其他的值转换为布尔值<br>"}],"id":"81f787ef7851","title":"布尔值 ：真或者假的表达"},{"parent":"3663a34a4b47","children":[{"parent":"2008950abcdf","children":[],"id":"0c32d8019944","title":"比较运算符：用来执行比较&nbsp;<br>1、等于和不等于 == !=&nbsp;<br>2、大小等于 &lt;&nbsp; &gt; &lt;=&nbsp; &gt;= <br>3、对象判断符号：is,is not 判断两个变量是否指向同一个对象<br>4、成员运算符 in, not in 检查对象是不是容器的成员<br>* 备注：关于字符串和序列比较：按照排列顺序比较<br>其中字符串中字符按照字母排列顺序比较，<br>使用函数ord可以查看字母的顺序值<br>"},{"parent":"2008950abcdf","children":[{"parent":"6579722ca8a4","children":[],"id":"9bd7a8814740","title":"and 当两个对象都为真时，返回真&nbsp; <br>其中，若判断第一个值为假，则不去判断第二个对象<br>"},{"parent":"6579722ca8a4","children":[],"id":"570e7ce550d2","title":"or&nbsp; 其中一个为真时，就返回真<br>当判断第一个对象为真时，就不去判断第二个对象了"},{"parent":"6579722ca8a4","children":[],"id":"5cda33342be9","title":"not 反转真假"}],"id":"6579722ca8a4","title":"布尔(逻辑)运算符 ：短路逻辑"}],"id":"2008950abcdf","title":"运算符"},{"parent":"3663a34a4b47","children":[{"parent":"a6dd89cca900","children":[{"parent":"8b663199dddc","children":[{"parent":"8368749cc13c","children":[],"id":"875e4657af73","title":"用if来有条件地执行冒号后面的代码，不满足则进入else模块执行。<br>其中else为可选内容"}],"id":"8368749cc13c","title":"if [判断]:<br>&nbsp; &nbsp; [一个语句或代码块]<br>else：<br>&nbsp; &nbsp; [执行]"},{"parent":"8b663199dddc","children":[],"id":"1b6e268f7a33","title":"if可以组成条件表达式，C语言三目运算的python版本<br>举例：status = \"friend\" if name.endswith(\"der\") else \"stranger\""}],"id":"8b663199dddc","title":"if&nbsp;"},{"parent":"a6dd89cca900","children":[{"parent":"f6446818ad50","children":[],"id":"44d2589dadbf","title":"当需要检查多个条件时，可以使用elif<br>elif是由一个if子句和一个else子句组成"},{"parent":"f6446818ad50","children":[],"id":"11c0153ac516","title":"if [判断]:<br>&nbsp; &nbsp; [一个语句或代码块]<br>elif [判断]:<br>&nbsp; &nbsp; [执行]<br>......<br>else：<br>&nbsp; &nbsp; [执行]"}],"id":"f6446818ad50","title":"添加elif","summaries":[]},{"parent":"a6dd89cca900","children":[],"id":"3e86ffef3f84","title":"* 备注：if语句里面可以嵌套if语句"}],"id":"a6dd89cca900","title":"使用形式"}],"id":"3663a34a4b47","title":"性质与使用"},{"parent":"4ab5e783523a","children":[{"parent":"dbd9bfa70ff3","children":[],"id":"bb1db9a73cf6","title":"当程序出现错误的时候，让其崩溃，两种方法：<br>1、if not condition:&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; crash program<br>2、使用关键字assert，assert后面还可以添加字符串对断言进行说明|<br>"}],"id":"dbd9bfa70ff3","title":"断言"}],"id":"4ab5e783523a","title":"if语句","summaries":[]}],"id":"201d94074619","title":"选择","summaries":[]},{"parent":"073d78604816","children":[{"parent":"50aa90564a7a","children":[{"parent":"814e44fadab8","children":[],"id":"bc544f7ddc5f","title":"while [终止判断]:<br>&nbsp; &nbsp; [循环内容]"},{"parent":"814e44fadab8","children":[],"id":"9b340a0a6439","title":"一般在while循环中我们要设置初始条件和迭代条件"}],"id":"814e44fadab8","title":"while循环"},{"parent":"50aa90564a7a","children":[{"parent":"a26dfa9c459b","children":[],"id":"2329a7d6e2e7","title":"for循环对可迭代对象中每个元素执行代码块"},{"parent":"a26dfa9c459b","children":[],"id":"1d262a2fc549","title":"for [元素] in [可迭代对象]:<br>&nbsp; &nbsp; &nbsp; &nbsp; [执行的内容]"},{"parent":"a26dfa9c459b","children":[{"parent":"4d275a0b65c7","children":[],"id":"3558e4a45ad8","title":"[关于原理]涉及到迭代，有两个名词，迭代器和生成器。<br>在对这一方面有很深入的要求之前，可以这样理解它们：<br>1、生成器是迭代器的一种，本质也是一种迭代<br>2、为什么会有迭代器这一东西？是因为迭代器在加载数据到内存时，<br>不是一次性全部加载，而是调用方法next，一次一次调用，知道最后引发stop异常。<br>从这点理解，就是为了数据处理的时效性。所以在循环中处理的对象一般是可迭代对象。<br>3、关于生成器，大体原理也如同第二点。特别说明的是生成器的原理里的一个语句：<br>yield语句，包含yield语句的都被成为生成器，特点是每次使用yield生成一个值后，函数将冻结，<br>停止执行，等待被重新唤醒，被重新唤醒后，从停止的地方开始执行。"},{"parent":"4d275a0b65c7","children":[{"parent":"304d95325bb9","children":[],"id":"512b046d01b7","title":"range&nbsp; &nbsp; 创建一列可迭代数字，三个要素：起始、结束、步长。<br>只有一个参数时，默认从0开始<br>可以使用help(range)查看用法"},{"parent":"304d95325bb9","children":[],"id":"e6b8fead437c","title":"zip 同时迭代两个对象，将两个序列打包，返回一个由元组组成的可迭代对象。<br>1、查看返回全部内容，可以转化为列表查看，方法是用list函数<br>2、当序列长度不同时，按最短的序列打包<br>3、在for循环中会将zip返回的元组解包"},{"parent":"304d95325bb9","children":[],"id":"be7f50099b9d","title":"enumerate 迭代时提供当前对象的索引，即迭代索引-值对。"},{"parent":"304d95325bb9","children":[],"id":"4a8a176267a0","title":"sorted 将对象排序，以列表的形式返回"},{"parent":"304d95325bb9","children":[],"id":"c7a21f8e21a7","title":"reversed 将对象反转，以可迭代对象的形式返回"}],"id":"304d95325bb9","title":"常用的迭代函数"}],"id":"4d275a0b65c7","title":"迭代对象"}],"id":"a26dfa9c459b","title":"for循环"},{"parent":"50aa90564a7a","children":[{"parent":"cf2d1f2adac3","children":[],"id":"8d0886a1308d","title":"在循环正常结束时执行某种操作可以用else，else语句将在没有调用break时执行"}],"id":"cf2d1f2adac3","title":"循环中的else子句"},{"parent":"50aa90564a7a","children":[{"parent":"30b56b563d8f","children":[{"parent":"21b32a214689","children":[],"id":"93fef7df4920","title":"跳出循环，结束迭代"}],"id":"21b32a214689","title":"break&nbsp;"},{"parent":"30b56b563d8f","children":[{"parent":"4d5b60312df6","children":[],"id":"7da45e466e40","title":"结束当前迭代，并跳到下一次迭代开头"}],"id":"4d5b60312df6","title":"continue"},{"parent":"30b56b563d8f","children":[{"parent":"b1441fd5702b","children":[],"id":"a5e13be8f175","title":"搭配使用，循环执行某一条件，当满足某一要求时跳出整个循环"}],"id":"b1441fd5702b","title":"while True + break<br>"}],"id":"30b56b563d8f","title":"跳出循环&nbsp;"}],"id":"50aa90564a7a","title":"循环"},{"parent":"073d78604816","children":[{"parent":"375e42893362","children":[{"parent":"24b52b83403a","children":[],"id":"12cd20614bbf","title":"从其他列表创建列表,可以使用for、if等语句<br>例如：<br>[x*x for x in range(10)] &gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"},{"parent":"24b52b83403a","children":[],"id":"5b314d5b3407","title":"备注： <br>圆()括号推导创建的是生成器<br>花{}括号推导生成字典"}],"id":"24b52b83403a","title":"列表推导"},{"parent":"375e42893362","children":[{"parent":"9669477b5e00","children":[],"id":"6db4f6b78a75","title":"占位符，写代码时某一块没想好要写啥，这个位置就先用pass把位置占着"},{"parent":"9669477b5e00","children":[],"id":"200f665da3a9","title":"还有另外一种方法：插入一个字符串（文档字符串），尤其适用于未完成的函数和类"}],"id":"9669477b5e00","title":"pass语句"}],"id":"375e42893362","title":"补充"}],"collapsed":true,"link":{"type":"url","title":"控制语句代码参考","value":"https://github.com/LiBigTree/draft/blob/master/basic/%5Bs_4%5D%20control.py"},"id":"073d78604816","title":"控制语句"},{"parent":"root","children":[{"parent":"c80fce19d0ac","children":[{"parent":"76552907486a","children":[],"id":"9b1371195bbf","title":"函数是抽象的体现。抽象就是当你做一件事情时，你只需要关注这件事情本身<br>而不需要再去考虑上一层和下一层的细节。例如：<br>使用QQ时，你只需要关注如何利用QQ本身实现你的需求（如何操作），<br>而不需要关注它是如何是实现这一功能的。"},{"parent":"76552907486a","children":[],"id":"8a6016e8fa4d","title":"抽象对应的是一层层的逻辑结构"}],"id":"76552907486a","title":"抽象"},{"parent":"c80fce19d0ac","children":[{"parent":"1cabb32767b6","children":[{"parent":"7527ad9f9521","children":[],"id":"f7db5c43f1d8","title":"函数是将某一功能集成，实现输入输出映射的一个对象。<br>在python中，输入输出并不那么严格，是可选的，这时候输入输出是隐型的。<br>"}],"id":"7527ad9f9521","title":"定义"},{"parent":"1cabb32767b6","children":[{"parent":"a98a0e97e288","children":[{"parent":"5735e6c356a8","children":[],"id":"d1f23739ad4d","title":"说明： 在这个结构中，放在函数开头的字符串称作文档字符串，<br>作为函数的一部分储存起来。<br>这一内容可以用内置函数help去调用，所以当我们需要知道某一函数的用法时，<br>可以使用help函数。"}],"id":"5735e6c356a8","title":"创建规则：<br>def&nbsp; 函数名( [ 参数(可选) ] ):<br>&nbsp; &nbsp; 'doc string'<br>&nbsp; &nbsp; [主体执行内容]"},{"parent":"a98a0e97e288","children":[{"parent":"c33e57037365","children":[],"id":"d56bbef67b6e","title":"作用域是变量生效的区域，理解时可以类比数学里的定义域"},{"parent":"c33e57037365","children":[{"parent":"2308cdc91667","children":[],"id":"dafb7c4316d0","title":"全局作用域，函数以外的变量的效用范围，可以在任意位置被程序访问<br>"},{"parent":"2308cdc91667","children":[],"id":"8076133df3d8","title":"局部作用域，在一个函数调用时被创建，每一个函数效果范围便是<br>一个局部的作用域。"},{"parent":"2308cdc91667","children":[],"id":"38f1cd2fff9a","title":"* 备注：全局作用域在程序执行时创建，在程序执行结束时销毁<br>局部作用域在函数创建时被调用，在调用结束后被销毁"}],"id":"2308cdc91667","title":"分类"},{"parent":"c33e57037365","children":[],"id":"fbc48c4a3f40","title":"应用： 程序执行时，会从当前作用域开始查找变量，如果没有，就向上一级继续查找，<br>直到全局作用域还没有就抱错。"},{"parent":"c33e57037365","children":[{"parent":"f1fac0324d98","children":[],"id":"3ebc0c419f8e","title":"命名空间是储存变量的位置，创建一个变量就是将其储存到指定的命名空间<br>命名空间分为全局命名空间和局部命名空间<br>全局命名空间是存储全局变量，局部命名空间储存局部变量"}],"id":"f1fac0324d98","title":"作用域有一个对应的概念，叫做命名空间："},{"parent":"c33e57037365","children":[],"id":"b4288e79bd36","title":"global语句 在函数内部，把局部变量变为全局变量"}],"id":"c33e57037365","title":"命名空间与作用域"},{"parent":"a98a0e97e288","children":[{"parent":"fdcbe29e982c","children":[],"id":"2a116822268d","title":"1、 在python中，可以不设置参数，def(): ... <br>这种操作是让函数去执行某个过程，例如：<br>生成某个文件、转化某个内容等等"},{"parent":"fdcbe29e982c","children":[{"parent":"0df7ab16e24f","children":[{"parent":"bfb376e1559d","children":[],"id":"617ddd626308","title":"通过位置对应函数里的变量，和顺序有关<br>第一个形参对应第一个实参，第二个形参对应第二个实参，<br>并类推下去"}],"id":"bfb376e1559d","title":"第一种 位置参数"},{"parent":"0df7ab16e24f","children":[{"parent":"8f083dc67e87","children":[],"id":"0bc0d93d041d","title":"用名称指定对应的参数，每个参数作用清晰，与顺序无关"}],"id":"8f083dc67e87","title":"第二种 关键字参数"},{"parent":"0df7ab16e24f","children":[],"id":"6da8cd517c81","title":"备注： 不建议结合使用位置参数和关键字参数，如果使用，必须先指定好位置参数"}],"id":"0df7ab16e24f","title":"2、 如果设置参数，有这么两种形式：<br>（创建函数时设置的参数叫做形参，<br>调用函数时使用的叫做实参）"},{"parent":"fdcbe29e982c","children":[{"parent":"0feb51443247","children":[{"parent":"268bcd09fbe0","children":[{"parent":"c0f0451a6ff9","children":[],"id":"59976f48633b","title":"一个星号用来收集多余的位置参数，以元组形式返回，使用时已知的位置参数都要在星号前面<br>举例：<br>def ex1(a,b,*c): ...&nbsp;<br>当我们向ex1提供多余的参数时：1，2，3，4，a和b对应1,2 ，而剩下的3和4就被*收集，<br>并以元组的形式返回，即c =（3，4）"}],"id":"c0f0451a6ff9","title":"一个星号"},{"parent":"268bcd09fbe0","children":[{"parent":"aa0c23f22730","children":[],"id":"196606f7b4c0","title":"两个星号用来收集多余的关键字参数，以字典的形式返回。"}],"id":"aa0c23f22730","title":"两个星号"}],"id":"268bcd09fbe0","title":"在调用函数时，提供任意（许多个）数量的参数时，<br>可以通过星号来收集多余的参数"}],"id":"0feb51443247","title":"收集参数<br>（备注：这是函数定义时的设置）"},{"parent":"fdcbe29e982c","children":[{"parent":"80ec2e847177","children":[],"id":"1fbe5219d675","title":"与收集参数对应，在调用函数时<br>可以使用*或者**将元组或者字典的变量分配给位置参数和关键字参数"},{"parent":"80ec2e847177","children":[],"id":"df2775cf0d04","title":"这里的*作用在序列解包也提到过，是一个东西"}],"id":"80ec2e847177","title":"分配参数"}],"id":"fdcbe29e982c","title":"参数"}],"id":"a98a0e97e288","title":"创建与使用"},{"parent":"1cabb32767b6","children":[{"parent":"c5c72519de1a","children":[{"parent":"976c62176670","children":[],"id":"7bd10dcaeea7","title":"递归是使用函数解决问题的一种思想：<br>将一个大问题分解为一个个的小问题，直到问题无法分解时，再去解决问题<br>"},{"parent":"976c62176670","children":[{"parent":"a27b6703c393","children":[],"id":"faf71a764c59","title":"1、基线条件：问题分解到最后的最小问题，当满足基线条件时，递归不再执行"},{"parent":"a27b6703c393","children":[],"id":"931c00b80ce3","title":"2、递归条件：将问题继续分解的条件，即每一次调用的变化操作"}],"id":"a27b6703c393","title":"递归的要素："}],"id":"976c62176670","title":"递归"},{"parent":"c5c72519de1a","children":[{"parent":"4dbfa18e3ab4","children":[],"id":"9c0d7ed4d24e","title":"接收函数作为参数，或者将函数作为返回值的函数是高阶函数<br>（使用一个函数作为参数，就是将指定的代码传递进目标函数）"},{"parent":"4dbfa18e3ab4","children":[{"parent":"a453ed4fa278","children":[],"id":"8c1243d5c788","title":"1、 lambda函数表达式，专门用来创建一些简单的函数<br>2、语法：lambda 参数列表 : 返回值<br>3、匿名函数一般都是作为参数使用，其他地方一般不会使用"},{"parent":"a453ed4fa278","children":[],"id":"4c14903c2601","title":"举例：<br>lambda a,b : a + b<br>"}],"id":"a453ed4fa278","title":"匿名函数 ：lambda 函数表达式 （语法糖）<br>匿名的意思就是没有def定义了<br>"},{"parent":"4dbfa18e3ab4","children":[{"parent":"4108fb8822a6","children":[{"parent":"ed86df391d14","children":[],"id":"e9c5e83fbb06","title":"1、通过闭包可以创建一些只有当前函数能访问的变量<br>2、可以将一些私有的数据藏到的闭包中"}],"id":"ed86df391d14","title":"将函数作为返回值返回，这种高阶函数称为叫做闭包。<br>"},{"parent":"4108fb8822a6","children":[{"parent":"aeb0ab78bd1f","children":[],"id":"926ede1adb98","title":"1、函数嵌套<br>"},{"parent":"aeb0ab78bd1f","children":[],"id":"b9626a7b6f16","title":"2、将内部函数作为返回值返回<br>"},{"parent":"aeb0ab78bd1f","children":[],"id":"e7a53207aa50","title":"3、内部函数必须要使用到外部函数的变量"}],"id":"aeb0ab78bd1f","title":"条件："}],"id":"4108fb8822a6","title":"闭包"},{"parent":"4dbfa18e3ab4","children":[{"parent":"a2eddcaabef4","children":[],"id":"4b5d588e2e0a","title":"对一个函数进行功能拓展，<br>将这个函数作为参数传递给新的装饰器函数，完成对功能的拓展。"},{"parent":"a2eddcaabef4","children":[{"parent":"145216af2eb2","children":[],"id":"da1ec20179b8","title":"def wrapper(要拓展的函数):<br>&nbsp; &nbsp; def 拓展的函数(*args, **kwargs):<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[参数解包]<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [代码块]<br>&nbsp; &nbsp; &nbsp;return 拓展的函数"}],"id":"145216af2eb2","title":"装饰器用*和**收集参数，然后传到旧函数解包"},{"parent":"a2eddcaabef4","children":[{"parent":"c3861cc5bd04","children":[],"id":"a31de4759d72","title":"可以同时为函数指定多个装饰器，这样函数会由内层往外装饰"}],"id":"c3861cc5bd04","title":"装饰器用法：<br>@装饰器1<br>@装饰器2...<br>要装饰的函数"}],"id":"a2eddcaabef4","title":"装饰器"},{"parent":"4dbfa18e3ab4","children":[],"id":"4d74f93b31eb","title":"这一块内容在刚开始学习时不要求掌握，了解一下"}],"id":"4dbfa18e3ab4","title":"高阶函数"}],"id":"c5c72519de1a","title":"应用"}],"id":"1cabb32767b6","title":"自定义函数的创建与使用"}],"collapsed":true,"link":{"type":"url","title":"函数部分代码参考","value":"https://github.com/LiBigTree/draft/blob/master/basic/%5Bs_5%5D%20function.py"},"id":"c80fce19d0ac","title":"函数"},{"parent":"root","children":[{"parent":"73ec987ec9c7","children":[{"parent":"e49b73a65547","children":[{"parent":"46bcc29ff58a","children":[],"id":"21ca0988dad8","title":"面向过程和面向对象指的是处理问题（完成一个功能）的思维。<br>面向过程是将一个功能分解为一个个小步骤去执行。"}],"id":"46bcc29ff58a","title":"面向过程"},{"parent":"e49b73a65547","children":[{"parent":"e95517c71f6b","children":[],"id":"952ec5c3b304","title":"面向对象本质是建立在面向过程之上的。将过程封装到一个个对象，<br>通过操作对象实现更上一层的功能。<br>面向对象在编写大型程序更有效率。"}],"id":"e95517c71f6b","title":"面向对象"}],"id":"e49b73a65547","title":"面向对象与面向过程"},{"parent":"73ec987ec9c7","children":[{"parent":"f33f5fce3a89","children":[{"parent":"460686f46eae","children":[{"parent":"14048d14b54a","children":[],"id":"6466d2a0e459","title":"类，我们可以理解为它是创造对象的模板。<br>通过函数类比：<br>创建函数时有形参的概念，一个函数相当于是做了一个功能的模板，<br>可以不断使用这个模板重复做许多事情<br>调用函数时有实参的概念。就是将创建好的模板对应了一个实例，<br>每调用一次函数就是对应地创建一个实例<br>类也是如此，创建一个类，就是创建了一个制造对象的模板（函数是制造功能的模板），<br>然后调用类就对应着创建一个实例。<br>* 面向对象的优越之一便在这里很有体现，我们在做大量工作时，就需要从中找出规律，<br>用已有的模板或者在已有的模板上（模板就是为了偷懒，避免重复的工作）<br>做一些改动然后应用，去解决一个个实例问题。<br>（python是人类利用计算机去偷懒的过程中的杰出代表（/dog））<br>最后，记住一句话： 类，是创造对象的对象！"}],"id":"14048d14b54a","title":"类与实例化"},{"parent":"460686f46eae","children":[],"id":"d6c5c41a67c1","title":"举例：函数有内置自定义之说，类也有。<br>python中有许多内置的类，int便是类<br>就拿int类举例，x = int（10），这个等价于x = 10（内置类才可以这样简写）<br>就相当于有一个int类，然后用这个int类去创建一个对象实例——数字10，<br>这便是类的理解初步。<br>总结一下：一个int（）类对应地创造了一个int实例 int(10)，类就是这样来用的。"},{"parent":"460686f46eae","children":[],"id":"b8f35914b3a4","title":"通过isinstance()用来检查一个对象是否是一个类的实例"}],"id":"460686f46eae","title":"定义理解"},{"parent":"f33f5fce3a89","children":[{"parent":"880c02a0e329","children":[{"parent":"0abba6400280","children":[],"id":"31d93d997e3d","title":"class 类名([父类]):<br>&nbsp; &nbsp; 公共的属性<br><br>&nbsp; &nbsp; # 对象的初始化方法<br>&nbsp; &nbsp; def __init__(self, ...):<br>&nbsp; &nbsp; &nbsp; &nbsp; ...<br><br>&nbsp; &nbsp; #其他的方法<br>&nbsp; &nbsp; def method_1(self,. ..):<br>&nbsp; &nbsp; &nbsp; &nbsp; ...<br>&nbsp; def method_1(self,. ..):<br>&nbsp; &nbsp; &nbsp; &nbsp; ...<br><br>&nbsp; &nbsp; ......"}],"id":"0abba6400280","title":"类的基本结构"},{"parent":"880c02a0e329","children":[{"parent":"187c8f0aeb54","children":[],"id":"5b04753bbe75","title":"属性<br>在类中定义的变量叫做类的属性"},{"parent":"187c8f0aeb54","children":[{"parent":"ad1ccc4c49df","children":[{"parent":"c44fc6ad1176","children":[{"parent":"2960b57373f8","children":[],"id":"4f19c11a86c0","title":"类中的函数"}],"id":"2960b57373f8","title":"一般方法"},{"parent":"c44fc6ad1176","children":[{"parent":"5eb4a44b26c2","children":[],"id":"b34ac3709dde","title":"特殊方法需要知道的两点：<br>1、什么时刻调用<br>2、有什么用"},{"parent":"5eb4a44b26c2","children":[{"parent":"a0c9eb00e4a2","children":[],"id":"0424dedcb085","title":"1、在对象创建以后立即执行<br>2、用来向新建的对象初始化属性"}],"id":"a0c9eb00e4a2","title":"__init__方法"},{"parent":"5eb4a44b26c2","children":[{"parent":"c74bad90f1cc","children":[],"id":"eee9e4ace1c5","title":"1、会在尝试将对象转换为字符串的时候调用<br>2、用来指定对象转换为字符串的结果"}],"id":"c74bad90f1cc","title":"__str__方法"},{"parent":"5eb4a44b26c2","children":[{"parent":"224103f0b946","children":[],"id":"53fbb7c67421","title":"1、会在对当前对象使用repr()函数时调用<br>2、指定对象在 ‘交互模式’中直接输出的效果 "}],"id":"224103f0b946","title":"__repr__方法"},{"parent":"5eb4a44b26c2","children":[{"parent":"9671730fbabe","children":[],"id":"da696690f51c","title":"* 还有许多特殊方法，都可以在官方文档里查看<br>* 特殊方法和一般方法都是为了拓展对象的功能而存在，<br>它们只是在调用方式上不一样"}],"id":"9671730fbabe","title":"说明"}],"id":"5eb4a44b26c2","title":"特殊方法（魔法方法）<br>用双下划线标识:类似__init__<br>特殊方法会在特殊的时刻由解析器调用<br>"}],"id":"c44fc6ad1176","title":"从内容角度分类"},{"parent":"ad1ccc4c49df","children":[],"id":"f7cb2e001e68","title":"类中的函数可以被所有实例访问"}],"id":"ad1ccc4c49df","title":"方法<br>在类中定义的函数叫做类的方法"},{"parent":"187c8f0aeb54","children":[],"id":"6bba7a52cf74","title":"1、类和实例中都可以有属性和方法<br>2、类中的变量成为实例的公共属性<br>3、属性的查找流程：<br>现在当前的方法里找，找不到<br>向上一级到类里找，没有就报错"}],"id":"187c8f0aeb54","title":"类和实例化"}],"id":"880c02a0e329","title":"创建"}],"id":"f33f5fce3a89","title":"定义理解与创建"},{"parent":"73ec987ec9c7","children":[{"parent":"5120d71bfa79","children":[{"parent":"8c6791bf40c1","children":[],"id":"0d8918f3c546","title":"封装是实现定义的类不可以被随意查看和修改的功能的性质，顾名思义，将类包装一下。"},{"parent":"8c6791bf40c1","children":[],"id":"696fba89b7a7","title":"封装的方法:<br>将变量的名字隐藏，用单下划线+属性名：_属性名<br>然后根据功能需求设置该封装属性是否可以被获取和修改<br>"},{"parent":"8c6791bf40c1","children":[{"parent":"10cb8dc9582b","children":[{"parent":"695a4a2ee8fb","children":[],"id":"5ea9bc9d7d8f","title":"直接设置get_xx方法"},{"parent":"695a4a2ee8fb","children":[],"id":"286af0f95c49","title":"@property装饰器装饰<br>定义获取的内容方法"}],"id":"695a4a2ee8fb","title":"获取属性"},{"parent":"10cb8dc9582b","children":[{"parent":"e5cd8382e910","children":[],"id":"61585446c97d","title":"直接设置set_xx方法"},{"parent":"e5cd8382e910","children":[],"id":"8b44f0490a8b","title":"调用装饰器 @xx.setter"}],"id":"e5cd8382e910","title":"修改属性"}],"id":"10cb8dc9582b","title":"设置权限的方法"}],"id":"8c6791bf40c1","title":"封装"},{"parent":"5120d71bfa79","children":[{"parent":"d2ca71c864cc","children":[],"id":"f4abe2a6aced","title":"继承是实现子类借鉴利用父类属性和方法的功能的性质。<br>父类也叫基类，举例来理解： 现在有一个父类叫动物，<br>有跑、叫等方法，我们又需要开发一个狗类，<br>狗类有些功能是基于动物类的，我们不需要重新写，直接拿过来用，这就叫继承。<br>这个例子里，继承就是狗类借用了动物的方法，再在狗类里面添加独属于狗的属性。"},{"parent":"d2ca71c864cc","children":[],"id":"8f45c67ceac0","title":"继承的形式（方法）：<br>class xxx(父类)：<br>&nbsp; &nbsp; &nbsp; 代码块<br>* 1、即在创建类时指定父类，如果不指定，<br>默认为object，它是所有类的父类（本源）。<br>2、可以指定一个子类有多个父类，但一般不这样做，<br>因为会使得代码复杂。<br>3、在继承中，一般方法指定之后自动继承，<br>特殊方法需要用如下方式继承：<br>super().__init__([xxx]) 获取当前类的父类属性"},{"parent":"d2ca71c864cc","children":[],"id":"3965f274a42b","title":"所有的类有一个源头，object<br>结构：<br>object&gt;(内置的类、自定义父类)&gt;子类&gt;子类的子类..."},{"parent":"d2ca71c864cc","children":[],"id":"f2e979013440","title":"继承中，如果子类、父类有相同名字的方法，<br>则是以当前的方法为主，也就是方法由子类到父类会产生覆盖。"}],"id":"d2ca71c864cc","title":"继承"},{"parent":"5120d71bfa79","children":[{"parent":"eee3b6fae46a","children":[],"id":"6c4b8d7aba98","title":"多态是实现类的方法可以被不同的类型所使用的性质。<br>举例：<br>len() 的作用是获得指定对象的元素个数，<br>它可以获取字符串的长度、也可以获取列表的长度，这就是多态。<br>多态使得类的使用更加灵活。"},{"parent":"eee3b6fae46a","children":[{"parent":"b03fe19c860a","children":[],"id":"e4a3c40be8e0","title":"如果一只动物，走起来像鸭子或者叫起来像鸭子，就可以把它当作鸭子。<br>"}],"id":"b03fe19c860a","title":"鸭子类型"}],"id":"eee3b6fae46a","title":"多态"}],"link":{"type":"url","title":"类的参考2","value":"https://github.com/LiBigTree/draft/blob/master/basic/%5Bs_7%5D%20class2.py"},"id":"5120d71bfa79","title":"性质"},{"parent":"73ec987ec9c7","children":[{"parent":"c299bf0f586e","children":[],"id":"d404dedab8f0","title":"这里从创建和使用的角度再来说说属性和方法、"},{"parent":"c299bf0f586e","children":[{"parent":"e12328bfabd8","children":[],"id":"82b477b9e8d3","title":"属性是类和实例创建中设置的变量，有两类"},{"parent":"e12328bfabd8","children":[{"parent":"6cd089070562","children":[],"id":"4fc58e82e6ac","title":"类创建设置的属性"}],"id":"6cd089070562","title":"类属性"},{"parent":"e12328bfabd8","children":[{"parent":"c40751f4b832","children":[],"id":"23ec11713e84","title":"实例创建设置的属性"}],"id":"c40751f4b832","title":"实例属性"}],"id":"e12328bfabd8","title":"属性"},{"parent":"c299bf0f586e","children":[{"parent":"89c4f0576b5e","children":[],"id":"dfd91d5c9f9b","title":"方法是类和实例创建过程中的广义上的函数，有三类"},{"parent":"89c4f0576b5e","children":[{"parent":"446f68332ad3","children":[],"id":"3db2eeba95ba","title":"通过类创建的“函数”<br>调用时通过类调用"},{"parent":"446f68332ad3","children":[],"id":"2c98286bead7","title":"@classmethod<br>创建时的参数不再是cls"}],"id":"446f68332ad3","title":"类方法"},{"parent":"89c4f0576b5e","children":[{"parent":"ecae1a9cdbfd","children":[],"id":"7ae0d0680d9f","title":"实例创建中的“函数”，创建时的参数是self<br>调用时可以通过类和实例来调用"}],"id":"ecae1a9cdbfd","title":"实例方法"},{"parent":"89c4f0576b5e","children":[{"parent":"27e8628d64e3","children":[],"id":"becced4ae80c","title":"在类中存放，不会自动传参数<br>就是函数"},{"parent":"27e8628d64e3","children":[],"id":"e598e655db2f","title":"@staicmethod<br>一般是工具方法"}],"id":"27e8628d64e3","title":"静态方法"}],"id":"89c4f0576b5e","title":"方法"},{"parent":"c299bf0f586e","children":[{"parent":"919401d857d1","children":[],"id":"75104bd284a8","title":"在python中，如果一个对象不在被任何变量引用，它就是垃圾。<br>垃圾会影响程序运行，所以需要清理，python里有垃圾回收机制，<br>可以自动清理垃圾。用__del__方法可以知道垃圾被清理，这是因为<br>在清理垃圾之前会调用__del__方法"}],"id":"919401d857d1","title":"垃圾回收"}],"id":"c299bf0f586e","title":"应用"}],"collapsed":true,"link":{"type":"url","title":"类的参考一","value":"https://github.com/LiBigTree/draft/blob/master/basic/%5Bs_6%5D%20class.py"},"id":"73ec987ec9c7","title":"类"}],"root":true,"link":{"type":"url","title":"git内容参考","value":"https://github.com/LiBigTree/draft/tree/master/basic"},"theme":"paper","id":"root","title":"python基础","structure":"mind_free"}},"meta":{"exportTime":"2020-04-08 18:06:26","member":"","diagramInfo":{"creator":"","created":"","modified":"","title":"","category":""},"id":"","type":"ProcessOn Schema File","version":"1.0"}}